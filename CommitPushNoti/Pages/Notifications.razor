@page "/notifications"
@inject ICommitDetailServices CommitDetailServices
@using CommitPushNoti.Services.Interfaces
@using CommitPushNoti.Infrastructures.Models
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration


<h3>Notifications</h3>

<table class="table">
    <thead>
        <tr>
            <th>Collection Name</th>
            <th>Project Name</th>
            <th>Commit Message</th>
            <th>Committer</th>
            <th>Commit URL</th>
            <th>Created Date</th>
            <th>Line Changes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var commit in commits)
        {
            <tr>
                <td>@commit.Repository.Project.Collection.Name</td>
                <td>@commit.Repository.Project.Name</td>
                <td>@commit.CommitMessage</td>
                <td>@commit.User.Name</td>
                <td><a href="@commit.CommitUrl" target="_blank">View Commit</a></td>
                <td>@commit.CreateDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td>@commit.LineChange</td>
            </tr>
        }
    </tbody>
</table>

<div class="pagination">
    <button @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
    <span>Page @_currentPage of @totalPages</span>
    <button @onclick="NextPage" disabled="@(_currentPage == totalPages)">Next</button>
</div>

@code {
    private List<CommitDetail> commits = new();
    private int _currentPage = 1;
    private int pageSize;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        pageSize = Configuration.GetValue<int>("PageSize");
        await LoadCommits();

        // Kết nối SignalR
        connection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/notificationHub"), options =>
        {
            options.HttpMessageHandlerFactory = _ => new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true
                };
        })
        .Build();

        connection.On("Refresh", async () =>
       {
           if (connection.State == HubConnectionState.Connected)
           {
               await LoadCommits(); 
           }
           else
           {
               Console.WriteLine("SignalR connection not connected.");
           }
       });

        await connection.StartAsync();
    }

    private async Task LoadCommits()
    {
        // Lấy dữ liệu từ database
        var allCommits = await CommitDetailServices.GetPagedCommits(_currentPage, pageSize);
        commits = allCommits.Commits;
        totalPages = (int)Math.Ceiling((double)allCommits.TotalCount / pageSize);
        await InvokeAsync(StateHasChanged);
    }

    private async Task NextPage()
    {
        if (_currentPage < totalPages)
        {
            _currentPage++;
            await LoadCommits();
        }
    }

    private async Task PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadCommits();
        }
    }

    private HubConnection connection;
}
