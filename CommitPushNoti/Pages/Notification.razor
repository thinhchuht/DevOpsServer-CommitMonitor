@page "/notifications"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<h3>Real-time Commit Notifications</h3>

@if (Notifications.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Commit ID</th>
                <th>Repository</th>
                <th>Author</th>
                <th>Message</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var notification in Notifications)
            {
                <tr>
                    <td>@notification.CommitId</td>
                    <td>@notification.RepositoryName</td>
                    <td>@notification.AuthorName</td>
                    <td>@notification.CommitMessage</td>
                    <td>@notification.CommitDate</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No notifications yet.</p>
}

@code {
    private List<CommitNotification> Notifications = new();
    private HubConnection? HubConnection;

    protected override async Task OnInitializedAsync()
    {
        // Xây dựng kết nối với Hub
        HubConnection = new HubConnectionBuilder()
            .WithUrl("http://10.26.4.184:8080/notificationHub") // URL của SignalR Hub
            .Build();

        // Lắng nghe thông báo
        HubConnection.On<string>("ReceiveNotification", (message) =>
        {
            // Chèn thông báo vào đầu danh sách
            Notifications.Insert(0, new CommitNotification
                {
                    CommitMessage = message,
                    CommitId = Guid.NewGuid().ToString(), // Giả sử sử dụng GUID cho commitId
                    RepositoryName = "Example Repo", // Tùy chỉnh theo dữ liệu nhận được
                    AuthorName = "Example Author",  // Tùy chỉnh theo dữ liệu nhận được
                    CommitDate = DateTime.Now       // Tùy chỉnh theo dữ liệu nhận được
                });

            // Cập nhật giao diện
            InvokeAsync(StateHasChanged);
        });

        await HubConnection.StartAsync();
    }

    // Dọn dẹp khi component bị huỷ
    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            await HubConnection.DisposeAsync(); // Đóng kết nối SignalR
        }
    }

    public class CommitNotification
    {
        public string CommitId { get; set; }
        public string RepositoryName { get; set; }
        public string AuthorName { get; set; }
        public string CommitMessage { get; set; }
        public DateTime CommitDate { get; set; }
    }
}
