@page "/user-reporter"
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

<h3>User Reporter</h3>

<div>
    <h4>Select Users</h4>
    @foreach (var user in pagedUsers)
    {
        <div>
            <input type="checkbox" checked="@selectedEmails.Contains(user.Email)" @onchange="(e) => OnUserSelectionChanged(user.Email, e)" />
            <label>@user.Name (@user.Email)</label>
        </div>
    }

    <div class="pagination">
        <button @onclick="() => ChangeUserPage(currentUserPage - 1)" disabled="@((currentUserPage <= 1))">Previous</button>
        <span>Page @currentUserPage of @totalUserPages</span>
        <button @onclick="() => ChangeUserPage(currentUserPage + 1)" disabled="@((currentUserPage >= totalUserPages))">Next</button>
    </div>
    
    <div>
        <label for="pageSize">Page Size: </label>
        <input type="number" id="pageSize" min="1" value="@pageSize" @onchange="OnPageSizeChanged" />

    </div>
</div>

<div>
    <h4>Select Date Range</h4>
    <input type="datetime-local" @bind="FromDate" />
    <span>to</span>
    <input type="datetime-local" @bind="ToDate" />
    <button @onclick="OnDateFilterChanged">Apply Date Filter</button>
</div>

<h4>User Report</h4>
@if (userReporters != null && userReporters.Any())
{
    <table>
        <thead>
            <tr>
                <th>Username</th>
                <th>Email</th>
                <th>PR Count</th>
                <th>Commit Count</th>
                <th>Line Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var report in userReporters)
            {
                <tr>
                    <td>@report.Username</td>
                    <td>@report.Email</td>
                    <td>@report.PRCount</td>
                    <td>@report.CommitCount</td>
                    <td>@report.LineCount</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button @onclick="() => ChangePage(currentPage - 1)" disabled="@((currentPage <= 1))">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button @onclick="() => ChangePage(currentPage + 1)" disabled="@((currentPage >= totalPages))">Next</button>
    </div>
    <div>
        <label for="reportPageSize">Report Page Size: </label>
        <input type="number" id="reportPageSize" min="1" value="@reportPageSize" @onchange="OnReportPageSizeChanged" />
    </div>
}
else
{
    <p>No data available for the selected users and date range.</p>
}

@code {
    private List<User> users = new List<User>();
    public List<CommitPushNoti.Data.UserReporter> userReporters;
    private HashSet<string> selectedEmails = new HashSet<string>(); 
    private int currentPage = 1; 
    private int totalPages;
    private int pageSize = 10; 
    private int reportPageSize = 10;
    private int currentUserPage = 1; 
    private int totalUserPages; 
    private List<User> pagedUsers = new List<User>(); 
    private HubConnection connection;
    private DateTime FromDate { get; set; } = DateTime.Now.AddMonths(-1); 
    private DateTime ToDate { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAndReports();

        // Kết nối SignalR
        connection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/notificationHub"), options =>
        {
            options.HttpMessageHandlerFactory = _ => new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true
                };
        })
        .Build();

        connection.On("Refresh", async () =>
       {
           if (connection.State == HubConnectionState.Connected)
           {
               await LoadUsersAndReports();

           }
           else
           {
               Console.WriteLine("SignalR connection not connected.");
           }
       });

        await connection.StartAsync();

    }

    private async Task LoadUsersAndReports()
    {
        users = await UserService.GetAllUser();
        selectedEmails = new HashSet<string>(users.Select(u => u.Email)); 
        totalUserPages = (int)Math.Ceiling((double)users.Count / pageSize); 
        await LoadUserPage();
        await LoadReport(); 
    }

    private async Task LoadUserPage()
    {
        pagedUsers = users.Skip((currentUserPage - 1) * pageSize).Take(pageSize).ToList();
        await InvokeAsync(StateHasChanged); 
    }

    private async Task LoadReport()
    {
        var selectedEmailsList = selectedEmails.ToList();
        var userReports = await UserService.GetUserReport(selectedEmailsList, FromDate, ToDate);

        totalPages = (int)Math.Ceiling((double)userReports.Count / reportPageSize);

        userReporters = userReports
            .Skip((currentPage - 1) * reportPageSize)
            .Take(reportPageSize)
            .ToList();

        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangeUserPage(int page)
    {
        if (page >= 1 && page <= totalUserPages) 
        {
            currentUserPage = page;
            await LoadUserPage(); 
        }
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages) 
        {
            currentPage = page;
            await LoadReport(); 
        }
    }

    private async Task OnUserSelectionChanged(string email, ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            selectedEmails.Add(email); 
        }
        else
        {
            selectedEmails.Remove(email); 
        }
        await LoadReport();
    }

    private async Task OnDateFilterChanged()
    {
        await LoadReport(); 
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var newPageSize) && newPageSize > 0)
        {
            pageSize = newPageSize;

            totalUserPages = (int)Math.Ceiling((double)users.Count / pageSize);

            if (currentUserPage > totalUserPages)
            {
                currentUserPage = totalUserPages;
            }

            await LoadUserPage();
        }
    }

    private async Task OnReportPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var newPageSize) && newPageSize > 0)
        {
            reportPageSize = newPageSize;

            totalPages = (int)Math.Ceiling((double)userReporters.Count / reportPageSize);

            if (currentPage > totalPages)
            {
                currentPage = totalPages;
            }

            await LoadReport();
        }
    }

}
